<?php
	
	namespace Services\Signalize\Ast;
	
	use Services\Signalize\AstInterface;
	use Services\Signalize\AstVisitorInterface;
	
	/**
	 * Class AstBindText
	 */
	class AstBindContainer extends Ast {
		
		protected array $binds;
		
		/**
		 * AstBindContainer constructor.
		 * @param array $binds
		 */
		public function __construct(array $binds) {
			$this->binds = $binds;
		}
		
		/**
		 * Accept the underlying bind asts
		 * @param AstVisitorInterface $visitor
		 * @return void
		 */
		public function accept(AstVisitorInterface $visitor): void {
			parent::accept($visitor); // TODO: Change the autogenerated stub
			
			foreach($this->binds as $bind) {
				$bind->accept($visitor);
			}
		}
		
		/**
		 * Updates the visible bind
		 * @param AstBindVisible $visible
		 * @return void
		 */
		public function setVisible(AstBindVisible $visible): void {
			$this->binds['visible'] = $visible;
		}
		
		/**
		 * Updates the visible bind
		 * @return bool
		 */
		public function containsVisible(): bool {
			return !empty($this->binds['visible']);
		}
		
		/**
		 * Retrieves the expression used for the visible binding
		 * @return array An array of bind types and their accompanying bytecode
		 */
		public function getBinds(): array {
			return $this->binds;
		}
	}